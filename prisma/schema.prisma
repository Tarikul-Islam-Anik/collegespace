datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String   @id @default(uuid())
  type      PostType
  content   String   @db.VarChar(256)
  createdAt DateTime @default(now())
  userId    String
  likes     Like[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([createdAt, id])
  @@index([userId])
}

enum PostType {
  thought
  question
  project
}

model Like {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Bounty {
  title    String   @db.VarChar(51)
  reward   Int
  deadline DateTime
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
  @@index([userId])
}

model Company {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(51)
  bio       String?   @db.Text
  email     String    @unique
  phone     String?   @db.VarChar(15)
  website   String?   @db.VarChar(100)
  logo      String?   @db.Text
  job       Job[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Job {
  title     String  @db.VarChar(51)
  type      JobType
  salary    Int
  location  String? @db.VarChar(51)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@index([companyId])
  @@index([userId])
}

enum JobType {
  fulltime
  parttime
  contract
  internship
  temporary
  other
}

model StudentDetails {
  dob                    DateTime?
  gender                 GenderType
  userId                 String
  EducationalInformation EducationalInformation[]

  user User @relation(fields: [userId], references: [id])

  @@id([userId])
  @@index([userId])
}

enum GenderType {
  male
  female
}

model EducationalInformation {
  school    String    @db.VarChar(51)
  degree    String    @db.VarChar(51)
  field     String    @db.VarChar(51)
  startDate DateTime?
  endDate   DateTime?
  grade     Float

  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  studentDetailsUserId String?
  StudentDetails       StudentDetails? @relation(fields: [studentDetailsUserId], references: [userId])

  @@id([userId])
  @@index([userId])
  @@index([studentDetailsUserId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Non Next Auth
  username               String?                  @unique @db.VarChar(30)
  bio                    String?                  @db.VarChar(101)
  coverImage             String?                  @db.Text
  phone                  String?                  @db.VarChar(15)
  role                   UserType?
  completedProfile       Boolean?                 @default(false)
  posts                  Post[]
  followers              User[]                   @relation(name: "Followers")
  follows                User[]                   @relation(name: "Followers")
  Like                   Like[]
  Bounty                 Bounty[]
  Company                Company[]
  job                    Job[]
  StudentDetails         StudentDetails[]
  EducationalInformation EducationalInformation[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
}

enum UserType {
  student
  recruiter
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
