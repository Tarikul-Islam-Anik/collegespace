datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String   @id @default(uuid())
  type      PostType
  content   String   @db.VarChar(256)
  createdAt DateTime @default(now())
  userId    String
  likes     Like[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   Reply[]
  reposts   Repost[]

  @@unique([createdAt, id])
  @@index([userId])
}

model Repost {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

enum PostType {
  thought
  question
}

model Like {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Reply {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(128)
  createdAt DateTime @default(now())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([createdAt, id])
  @@index([userId])
  @@index([postId])
}

model Bounty {
  title    String   @db.VarChar(51)
  reward   Int
  deadline DateTime
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
  @@index([userId])
}

model Company {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(51)
  about     String    @db.Text
  email     String    @unique
  phone     String    @db.VarChar(15)
  website   String?   @db.VarChar(100)
  logo      String?   @db.Text
  address   String?   @db.VarChar(101)
  job       Job[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Job {
  title     String  @db.VarChar(51)
  type      JobType
  salary    Int
  location  String? @db.VarChar(51)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@index([companyId])
  @@index([userId])
}

enum JobType {
  fulltime
  parttime
  contract
  internship
  temporary
  other
}

model StudentDetails {
  studentId   String       @map("userId")
  dob         DateTime?    @db.DateTime
  gender      GenderType?
  country     String?      @db.VarChar(60)
  about       String?      @db.Text
  experience  Int?         @db.SmallInt
  educations  Education[]
  projects    Project[]
  skills      String
  experiences Experience[]

  user User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([studentId])
  @@index([studentId])
}

enum GenderType {
  male
  female
}

model Education {
  id        String   @id @default(uuid())
  school    String   @db.VarChar(101)
  degree    String   @db.VarChar(51)
  field     String   @db.VarChar(51)
  startDate DateTime
  endDate   DateTime
  grade     Float

  studentId String
  student   StudentDetails @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@index([studentId])
}

model Project {
  title       String   @db.VarChar(101)
  description String   @db.Text
  website     String?  @db.VarChar(100)
  startDate   DateTime
  endDate     DateTime

  studentId String
  student   StudentDetails? @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@unique([studentId, title])
  @@index([studentId])
}

model Experience {
  title       String   @db.VarChar(101)
  description String   @db.Text
  position    String   @db.VarChar(51)
  startDate   DateTime
  endDate     DateTime

  studentId String
  student   StudentDetails @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@unique([studentId, title])
  @@index([studentId])
}

model Notification {
  content      String   @db.VarChar(256)
  postId       String?
  interactorId String?
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([createdAt, userId])
  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Non Next Auth
  username        String?         @unique @db.VarChar(30)
  bio             String?         @db.VarChar(101)
  coverImage      String?         @db.Text
  phone           String?         @db.VarChar(15)
  role            UserType?
  hasNotification Boolean?        @default(false)
  studentDetails  StudentDetails?
  followers       User[]          @relation(name: "Followers")
  follows         User[]          @relation(name: "Followers")
  posts           Post[]
  likes           Like[]
  replies         Reply[]
  notifications   Notification[]
  bounties        Bounty[]
  company         Company[]
  jobs            Job[]
  reposts         Repost[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt
}

enum UserType {
  student
  recruiter
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
